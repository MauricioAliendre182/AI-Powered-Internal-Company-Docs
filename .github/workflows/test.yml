name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24.1'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.24.1']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      working-directory: ./backend
      run: go mod download

    - name: Verify dependencies
      working-directory: ./backend
      run: go mod verify

    - name: Check Go module tidiness
      working-directory: ./backend
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum || (echo "go.mod or go.sum not tidy" && exit 1)

    - name: Run go vet
      working-directory: ./backend
      run: go vet ./...

    - name: Run unit tests
      working-directory: ./backend
      env:
        JWT_SECRET: "test-secret-key-for-testing-only"
        OPENAI_API_KEY: "test-key"
        GOOGLE_AI_API_KEY: "test-key"
        ALLOWED_ORIGINS: "http://localhost:4200"
        ENVIRONMENT: "test"
        DB_PASSWORD: "test-password"
        DB_HOST: "localhost"
        DB_PORT: "5432"
        DB_USER: "postgres"
        DB_NAME: "test_db"
        SKIP_PROMPTFOO_TESTS: "true"
      run: |
        echo "Running unit tests for all packages (excluding PromptFoo integration tests)..."
        echo "Testing main package..."
        go test -v -race -timeout=2m -tags="!promptfoo" .
        echo "Testing models package..."
        go test -v -race -timeout=2m -tags="!promptfoo" ./models
        echo "Testing utils package..."
        go test -v -race -timeout=2m -tags="!promptfoo" ./utils
        echo "Testing routes package..."
        go test -v -race -timeout=2m -tags="!promptfoo" ./routes
        echo "Running all tests together (excluding PromptFoo)..."
        go test -v -race -timeout=5m -tags="!promptfoo" ./...

    - name: Run benchmark tests
      working-directory: ./backend
      env:
        JWT_SECRET: "test-secret-key-for-testing-only"
        OPENAI_API_KEY: "test-key"
        GOOGLE_AI_API_KEY: "test-key"
        ALLOWED_ORIGINS: "http://localhost:4200"
        ENVIRONMENT: "test"
        DB_PASSWORD: "test-password"
        DB_HOST: "localhost"
        DB_PORT: "5432"
        DB_USER: "postgres"
        DB_NAME: "test_db"
      run: |
        echo "Running benchmark tests..."
        go test -bench=. -benchmem -run=^$ ./... || echo "No benchmarks found"

    - name: Generate coverage report
      working-directory: ./backend
      env:
        JWT_SECRET: "test-secret-key-for-testing-only"
        OPENAI_API_KEY: "test-key"
        GOOGLE_AI_API_KEY: "test-key"
        ALLOWED_ORIGINS: "http://localhost:4200"
        ENVIRONMENT: "test"
        DB_PASSWORD: "test-password"
        DB_HOST: "localhost"
        DB_PORT: "5432"
        DB_USER: "postgres"
        DB_NAME: "test_db"
        SKIP_PROMPTFOO_TESTS: "true"
      run: |
        echo "Generating coverage report (excluding PromptFoo integration tests)..."
        go test -race -coverprofile coverage.out -covermode atomic -tags="!promptfoo" ./...
        go tool cover -html coverage.out -o coverage.html

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.go-version }}
        path: |
          ./backend/coverage.out
          ./backend/coverage.html
        retention-days: 30

  promptfoo-integration:
    name: PromptFoo AI Tests (Optional)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[test-ai]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js for PromptFoo
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install PromptFoo
      run: npm install -g promptfoo

    - name: Run PromptFoo integration tests
      working-directory: ./backend
      env:
        JWT_SECRET: "test-secret-key-for-testing-only"
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
        ALLOWED_ORIGINS: "http://localhost:4200"
        ENVIRONMENT: "test"
        SKIP_PROMPTFOO_TESTS: "false"
      run: |
        echo "Running PromptFoo integration tests..."
        go test -v -race -timeout=10m -tags="promptfoo" -run="TestPromptFoo" ./...
      continue-on-error: true

    - name: Upload PromptFoo results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: promptfoo-results
        path: |
          ./backend/promptfoo-results/
          ./backend/.promptfoo/
        retention-days: 7
      continue-on-error: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./backend
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      working-directory: ./backend
      run: |
        gosec -fmt sarif -out gosec-results.sarif -conf .gosec.json ./...
        gosec -fmt json -out gosec-results.json -conf .gosec.json ./...
        gosec -conf .gosec.json ./...
      continue-on-error: true

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ./backend/gosec-results.sarif
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          ./backend/gosec-results.sarif
          ./backend/gosec-results.json
        retention-days: 30
      continue-on-error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build backend
      working-directory: ./backend
      run: |
        go build -v -ldflags="-s -w" -o main .

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-binary
        path: ./backend/main
        retention-days: 30

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: ai-docs-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: ai-docs-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker compose -f docker-compose.yml config

  angular-test:
    name: Angular Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    # - name: Lint Angular code
    #   working-directory: ./frontend
    #   run: npm run lint

    - name: Run unit tests
      working-directory: ./frontend
      run: npm test -- --no-watch --no-progress --browsers=ChromeHeadless
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: angular-test-results
        path: ./frontend/coverage/
        retention-days: 30

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, docker, angular-test]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' && needs.build.result == 'success' && needs.angular-test.result == 'success' }}
      run: echo "✅ All tests passed successfully!"

    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.build.result == 'failure' || needs.angular-test.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        echo "Backend Tests: ${{ needs.test.result }}"
        echo "Backend Lint: ${{ needs.lint.result }}"
        echo "Security Scan: ${{ needs.security.result }}"
        echo "Backend Build: ${{ needs.build.result }}"
        echo "Docker Build: ${{ needs.docker.result }}"
        echo "Angular Tests: ${{ needs.angular-test.result }}"
        # Don't exit 1 for security warnings - they're informational
